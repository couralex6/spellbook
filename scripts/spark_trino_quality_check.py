import json
from pprint import pprint

import requests
from databricks import sql
from trino import dbapi
from trino.auth import BasicAuthentication
from trino.exceptions import TrinoUserError
import os


def get_tables_from_manifest(manifest_path):
    '''
    returns a csv of tables from a manifest file. We filter out
    '''
    table_csv_str = ""
    with open(manifest_path, "r") as f:
        manifest = json.load(f)
    for node_name in manifest["nodes"]:
        node_data = manifest["nodes"][node_name]
        if node_data["resource_type"] == "model":
            schema = node_data["schema"]
            table = node_data["alias"]
            materialized = node_data["config"]["materialized"]
            created_at = node_data["created_at"]
            partition_by = None
            if "partition_by" in node_data["config"]:
                partition_by = node_data["config"]["partition_by"][0]
            row = f"{schema}, {table}, {materialized}, {created_at}, {partition_by}\n"
            table_csv_str += row

    return table_csv_str

def upload_csv(table_list):
    '''
    Upload CSV string to dune.
    '''
    url = 'https://api.dune.com/api/v1/table/upload/csv'
    api_key = os.environ.get('DUNE_API_KEY')
    headers = {'X-Dune-Api-Key': api_key}
    payload = {
        "table_name": "spark_spellbook_status",
        "description": "Tables generated by Spark Spellbook.",
        "data": table_list
    }
    response = requests.post(url, data=json.dumps(payload), headers=headers)
    if response.status_code == 200 and response.json()['success']:
        print('Success writing CSV to Dune.com!', flush=True)
    else:
        print('Error writing CSV to Dune.com!')
        print(response.content)

def databricks_client():
    '''
    NOT NEEDED ANYMORE
    Return client for databricks SQL warehouse to query tables generated by Spark Spellbook.
    '''

    connection = sql.connect(
        server_hostname=os.environ["DATABRICKS_HOST"],
        http_path=os.environ["DATABRICKS_HTTP_PATH"],
        access_token=os.environ["DATABRICKS_ACCESS_TOKEN"])

    return connection


def trino_client():
    """
    Function that executes a query passed as a string against the trino server. We would like to use aws secrets
    manager to authenticate.
    """
    username = os.environ.get('TRINO_USERNAME')
    password = os.environ.get('TRINO_PASSWORD')

    # Creating a connection to the trino server
    trino_host = os.environ.get('TRINO_URL')
    conn = dbapi.connect(
        host=trino_host,
        port=443,
        auth=BasicAuthentication(username, password),
        http_scheme="https",
        client_tags=["routingGroup=sandbox"],
    )

    return conn


def execute_query(connection, query):
    '''
    Execute query and return results.
    '''
    cursor = connection.cursor()
    cursor.execute(query)
    response = cursor.fetchall()
    cursor.close()
    return response

def create_or_replace_status_table(connection, rows):
    '''
    Create or replace status table in Trino.
    '''
    cursor = connection.cursor()

    cursor.execute("CREATE TABLE sandbox.status (table_name VARCHAR, materialized VARCHAR, created_at VARCHAR, partition_by VARCHAR)")
    cursor.close()

if __name__ == "__main__":
    # # Connect to databases:
    # databricks_conn = databricks_client()
    # trino_conn = databricks_client()
    #
    # # get spark tables
    # spark_tables = get_tables_from_manifest("manifest.json", [])
    # # spark_tables = get_tables_from_manifest("/Users/couralex/Desktop/previous_manifest.json", [])
    # # get trino tables
    # # trino_tables = get_tables_from_manifest("s3://manifest-spellbook/manifest-trino.json", [])
    #
    # print(len(spark_tables))
    # count = 0
    # for table in spark_tables:
    #     if count < 10:
    #         count += 1
    #         sql_query = f"SELECT * FROM {table} LIMIT 1"
    #         print("DATABRICKS")
    #         print(execute_query(databricks_conn, sql_query))
    #         print("TRINO")
    #         print(execute_query(trino_conn, sql_query))
    #
    # databricks_conn.close()
    # trino_conn.close()

    spark_tables = get_tables_from_manifest("/Users/couralex/Desktop/previous_manifest.json")
    upload_csv(spark_tables)